ordering of classes - wip
arbitrary values for base classes - done
arbitrary variants - wip
some variants produce more than one css thing - done :(
some variants add extra selectors (group and peer) not too bad - barely started
customizing from a json file: - wip
    They will move to customizing from a css file but
    will keep backwards compatability with the json file.
    I think I will target the json file then make an adaptor that
    takes their css file and turns it into JSON for my code to understand.


tailwind features they wish they did not have:
    @apply (use theme() and spacing() instead)


my features:
- dump base classes for ide - seems done
- built in formatter for html, no need for prettier - kind of jank but its fine for now
- offline documentation - cli doc wip
- offline repl (like play.tailwind.css) - super easy

I am not sure if the / syntax should exist.
It just makes parsing harder and creates one more thing for the user to think about.
I think it would be better if we did multiple arbitrary variants.
I am going to implement it anyways just to say that I really supported all the features.
However, if I will turn this into a real tool, I might remove some cruft of the language before 1.0.

I think tailwind css uses string concatenation to build up their selectors.
I use a selector struct and turn it into a string when I want to print it.
The difference between these two methods prevents me from doing the "[]:" arbitrary variant as easily as they can.
I will skip over this feature for now but it could always be introduced as just another variant plugin.
Although I would have to create a special parser to put the arbitrary data into my struct.
That is too much complexity, and I am not sure how useful this feature is.
We already support arbitrary variants, so if we had a great selection of base variants then "[]:" would not be needed.
The same could be said about the arbitrary declaration base class, but I am keeping it because of how simple it was to implement.

Tailwind has some crazy things that are crazy to implement.
Namely *: because it shifts the target of the variants to a > * instead of the first selector.
Also []: because it does a lot of crazy stuff with the string.
I am just going to have to accept defeat and do an 80/20 solution.
When you are doing something that complex anyways it would probably be good to just use normal css.
I could probably support all of tailwind but it would be too crazy.
